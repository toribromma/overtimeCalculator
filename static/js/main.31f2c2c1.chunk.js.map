{"version":3,"sources":["utils/debounceHook.js","App.js","serviceWorker.js","index.js"],"names":["useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useStyles","makeStyles","theme","root","margin","spacing","width","header","marginTop","marginBottom","backgroundColor","border","borderRadius","color","padding","textField","App","initialHour","initialMinute","overtime","setOvertime","hourConverted","minuteConverted","conversion","setConversion","debouncedSearchTerm","hour","parseInt","minute","c","Math","floor","console","log","d","handleInputChange","event","target","name","classes","className","TextField","onChange","type","placeholder","label","id","variant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iRAqBeA,G,MAnBK,SAACC,EAAOC,GAAW,IAAD,EACQC,mBAASF,GADjB,mBAC7BG,EAD6B,KACbC,EADa,KAgBpC,OAdAC,qBACE,WACE,IAAMC,EAAUC,YAAW,WACzBH,EAAkBJ,KACjBC,GAEH,OAAO,WACLO,aAAaF,MAIjB,CAACN,EAAOC,IAGHE,I,gBCZHM,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,QAGXC,OAAQ,CACNC,UAAW,EACXC,aAAc,GACdL,OAAQ,OACRM,gBAAiB,UACjBC,OAAQ,oBACRC,aAAc,OACdC,MAAO,QACPC,QAAS,GACTR,MAAO,OAETS,UAAW,CACTL,gBAAiB,UACjBG,MAAO,eA4HIG,MAvHf,WAAgB,IAAD,EAEmBvB,mBAAS,CACvCwB,YAAa,GACbC,cAAe,KAJJ,mBAENC,EAFM,KAEIC,EAFJ,OAOuB3B,mBAAS,CAC3C4B,cAAe,KACfC,gBAAiB,KACjB/B,OAAO,IAVI,mBAONgC,EAPM,KAOMC,EAPN,KAcPC,EAAsBnC,EAAY6B,EAAU,KAElDvB,qBAAU,WAER,GAAK2B,EAAWhC,OAAU4B,EAASF,aAAgBE,EAASD,eAI5D,GAAIO,EAAqB,CAErB,IAAIC,EAAOC,SAASR,EAASF,aACzBW,EAASD,SAASR,EAASD,eAE3BW,EAAIC,KAAKC,MAA+B,KAAf,GAAPL,EAAYE,GAAe,IAGjDI,QAAQC,IAAIP,GACZM,QAAQC,IAAIL,GACZI,QAAQC,IAAIJ,GAEZ,IAAIK,EAAIJ,KAAKC,MAA8B,KAAf,GAAPL,EAAYE,GAAiB,IAClDI,QAAQC,IAAIC,GAIVV,EAAc,CACZH,cAAe,cAAgBQ,EAAI,SACnCP,gBAAiB,QAAUY,EAAI,WAC/B3C,OAAO,UAvBbiC,EAAc,2BAAID,GAAL,IAAiBhC,OAAM,OAwCrC,CAACkC,IAIJ,IAAMU,EAAoB,SAAAC,GAExB,IAAI7C,EAAQ6C,EAAMC,OAAO9C,MACnB+C,EAAOF,EAAMC,OAAOC,KAG1BlB,EAAY,2BACND,GADK,kBACMmB,EAAO/C,KAExBiC,EAAc,2BAAID,GAAL,IAAiBhC,OAAM,MAKhCgD,EAAUvC,IAEhB,OAEE,yBAAKwC,UAAU,OACb,wBAAIA,UAAWD,EAAQhC,QAAvB,uBACA,4EACA,0BAAMiC,UAAWD,EAAQpC,MACrB,kBAACsC,EAAA,EAAD,CAAWD,UAAWD,EAAQxB,UAC5BxB,MAAO4B,EAASF,YAChBqB,KAAK,cACLI,SAAUP,EACVQ,KAAK,SACLC,YAAY,OACZC,MAAM,QACNC,GAAG,eAAeC,QAAQ,WAE5B,kBAACN,EAAA,EAAD,CAAWD,UAAWD,EAAQxB,UAC5BxB,MAAO4B,EAASD,cAChBoB,KAAK,gBACLI,SAAUP,EACVQ,KAAK,SACLC,YAAY,SACZC,MAAM,UACNC,GAAG,eAAeC,QAAQ,YAG3BxB,EAAWhC,MAEZ,wBAAIiD,UAAWD,EAAQhC,QACvB,8BAAOgB,EAAWF,eAClB,8BAAOE,EAAWD,kBAGlB,wBAAIkB,UAAWD,EAAQhC,QAAvB,uBClIUyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.31f2c2c1.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useDebounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value or delay changes\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    // Only call the effect if value or delay changes.\n    [value, delay]\n  );\n\n  return debouncedValue;\n};\n\nexport default useDebounce;\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport useDebounce from \"./utils/debounceHook\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(3),\n      width: '33%',\n    },\n  },\n  header: {\n    marginTop: 5,\n    marginBottom: 10,\n    margin: \"auto\",\n    backgroundColor: \"#00C9A7\",\n    border: \"#4B4453 solid 2px\",\n    borderRadius: \"10px\",\n    color: \"white\",\n    padding: 10,\n    width: \"90%\"\n  },\n  textField: {\n    backgroundColor: \"#FEFEDF\",\n    color: \"#4B4453\",\n  }\n}));\n\n\nfunction App() {\n\n  const [overtime, setOvertime] = useState({\n    initialHour: \"\",\n    initialMinute: \"\",\n  });\n\n  const [conversion, setConversion] = useState({\n    hourConverted: null,\n    minuteConverted: null,\n    value: false\n  });\n\n\n  const debouncedSearchTerm = useDebounce(overtime, 2000);\n\n  useEffect(() => {\n    // document.title = \"Wikipedia Searcher\";\n    if (!conversion.value || !overtime.initialHour || !overtime.initialMinute) {\n      setConversion({...conversion, value:false})\n      return\n    }\n    if (debouncedSearchTerm) {\n        \n        let hour = parseInt(overtime.initialHour)\n        let minute = parseInt(overtime.initialMinute)\n      \n        let c = Math.floor((((hour * 60 + minute) * 1.5)/60))\n        \n        \n        console.log(hour)\n        console.log(minute)\n        console.log(c)\n\n        let d = Math.floor(((hour * 60 + minute) * 1.5) % 60)\n        console.log(d)\n\n        if (d < 10) {\n          // console.log(`you worked ${hours}:0${minutes2} hours of OT`)\n          setConversion({\n            hourConverted: \"You worked \" + c + \" hours\",\n            minuteConverted: \" and \" + d + \" minutes\",\n            value: true\n          })\n\n          }\n          else {\n          // console.log(`you worked ${hours}:${minutes2} hours of OT`)\n          setConversion({\n            hourConverted: \"You worked \" + c + \" hours\",\n            minuteConverted: \" and \" + d + \" minutes\",\n            value: true\n          })\n\n          }\n        \n      \n      \n    }\n  }, [debouncedSearchTerm]);\n\n\n\n  const handleInputChange = event => {\n    // Getting the value and name of the input which triggered the change\n    let value = event.target.value;\n    const name = event.target.name;\n\n    // Updating the input's state\n    setOvertime(\n      {...overtime, [name]: value})\n    \n    setConversion({...conversion, value:true})\n\n\n  };\n\n  const classes = useStyles();\n\n  return (\n\n    <div className=\"App\">\n      <h1 className={classes.header}>Overtime Calculator</h1>\n      <h2>How many hours of Overtime did you complete?</h2>\n      <form className={classes.root}>\n          <TextField className={classes.textField}\n            value={overtime.initialHour}\n            name=\"initialHour\"\n            onChange={handleInputChange}\n            type=\"number\"\n            placeholder=\"hour\"\n            label=\"Hours\"\n            id=\"filled-basic\" variant=\"filled\"\n          />\n          <TextField className={classes.textField}\n            value={overtime.initialMinute}\n            name=\"initialMinute\"\n            onChange={handleInputChange}\n            type=\"number\"\n            placeholder=\"minute\"\n            label=\"Minutes\"\n            id=\"filled-basic\" variant=\"filled\"\n          />\n          </form>\n          {conversion.value ? \n          \n          <h1 className={classes.header}>\n          <span>{conversion.hourConverted}</span>\n          <span>{conversion.minuteConverted}</span>\n          </h1>\n          :\n          <h1 className={classes.header}>Type some numbas!</h1>\n        }\n          \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}